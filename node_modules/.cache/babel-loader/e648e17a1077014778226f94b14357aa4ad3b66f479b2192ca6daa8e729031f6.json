{"ast":null,"code":"var _jsxFileName = \"/Users/anastasiakobyzeva/Desktop/ReactTest/ProjectTelRun/2808nelly/src/components/Navbar/MoodSwitcher/MoodSwitcher.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DarkMood from '../../../assets/icons/DarkMood';\nimport LightMood from '../../../assets/icons/LightMood';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoodSwitcher() {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  useEffect(() => {\n    // Проверяем, есть ли сохраненное состояние в локальном хранилище\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n      setIsDarkMode(true);\n    } else {\n      setIsDarkMode(false);\n    }\n  }, []);\n  useEffect(() => {\n    // Обновляем класс темы при изменении состояния\n    if (isDarkMode) {\n      document.body.classList.add('dark');\n      localStorage.setItem('theme', 'dark'); // Сохраняем выбранную тему\n    } else {\n      document.body.classList.remove('dark');\n      localStorage.setItem('theme', 'light'); // Сохраняем выбранную тему\n    }\n  }, [isDarkMode]);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode); // Изменяем состояние для переключения темы\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.theme,\n      children: isDarkMode ? /*#__PURE__*/_jsxDEV(DarkMood, {\n        onClick: toggleTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 27\n      }, this) : /*#__PURE__*/_jsxDEV(LightMood, {\n        onClick: toggleTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 64\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(MoodSwitcher, \"jZSDCHM8qUYa7sOOCe+CR2toAGQ=\");\n_c = MoodSwitcher;\nvar _c;\n$RefreshReg$(_c, \"MoodSwitcher\");","map":{"version":3,"names":["React","useState","useEffect","DarkMood","LightMood","jsxDEV","_jsxDEV","MoodSwitcher","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","document","body","classList","add","setItem","remove","toggleTheme","children","className","s","theme","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anastasiakobyzeva/Desktop/ReactTest/ProjectTelRun/2808nelly/src/components/Navbar/MoodSwitcher/MoodSwitcher.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport DarkMood from '../../../assets/icons/DarkMood';\nimport LightMood from '../../../assets/icons/LightMood';\n\nexport default function MoodSwitcher() {\n    const [isDarkMode, setIsDarkMode] = useState(false);\n\n    useEffect(() => {\n        // Проверяем, есть ли сохраненное состояние в локальном хранилище\n        const savedTheme = localStorage.getItem('theme');\n        if (savedTheme === 'dark') {\n            setIsDarkMode(true);\n        } else {\n            setIsDarkMode(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        // Обновляем класс темы при изменении состояния\n        if (isDarkMode) {\n            document.body.classList.add('dark');\n            localStorage.setItem('theme', 'dark'); // Сохраняем выбранную тему\n        } else {\n            document.body.classList.remove('dark');\n            localStorage.setItem('theme', 'light'); // Сохраняем выбранную тему\n        }\n    }, [isDarkMode]);\n\n    const toggleTheme = () => {\n        setIsDarkMode(!isDarkMode); // Изменяем состояние для переключения темы\n    };\n  return (\n    <div>\n        <div className={s.theme}>\n            {isDarkMode ? <DarkMood onClick={toggleTheme} /> : <LightMood onClick={toggleTheme} />}\n        </div>\n    </div>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,SAAS,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,KAAK,MAAM,EAAE;MACvBD,aAAa,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACHA,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC,EAAE,EAAE,CAAC;EAENR,SAAS,CAAC,MAAM;IACZ;IACA,IAAIO,UAAU,EAAE;MACZK,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MACnCL,YAAY,CAACM,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IAC3C,CAAC,MAAM;MACHJ,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACG,MAAM,CAAC,MAAM,CAAC;MACtCP,YAAY,CAACM,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5C;EACJ,CAAC,EAAE,CAACT,UAAU,CAAC,CAAC;EAEhB,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACtBV,aAAa,CAAC,CAACD,UAAU,CAAC,CAAC,CAAC;EAChC,CAAC;;EACH,oBACEH,OAAA;IAAAe,QAAA,eACIf,OAAA;MAAKgB,SAAS,EAAEC,CAAC,CAACC,KAAM;MAAAH,QAAA,EACnBZ,UAAU,gBAAGH,OAAA,CAACH,QAAQ;QAACsB,OAAO,EAAEL;MAAY;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAAGvB,OAAA,CAACF,SAAS;QAACqB,OAAO,EAAEL;MAAY;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACrB,EAAA,CAlCuBD,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}